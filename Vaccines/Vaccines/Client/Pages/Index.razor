@page "/"
@using Vaccines.Shared
@inject IVaccineService VaccineService
@implements IDisposable


<h3>Vaccine details</h3>

@if (VaccineService.vacine.Count == 0)
{
    <span>Loading Vaccine</span>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Vaccine Name </th>
                <th>Batch No </th>
                <th>Distributed Area</th>
                <th>No of Doses</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vac in VaccineService.vacine)
            {
                <tr>
                    <td>@vac.Name</td>
                    <td>@vac.BatchNo</td>
                    <td>@vac.Area</td>
                    <td>@vac.NoofDoses</td>
                </tr>
            }
        </tbody>
    </table>
}
<br />
<h3>Create new Distribution info</h3>
<EditForm Model="vac" OnSubmit="HandleSubmit">
    <div>
        <label>Vaccine Name</label>
        <br />
        <InputText @bind-Value="vac.Name"></InputText>
    </div>
    <br />
    <div>
        <label>Batch Number</label>
        <br />
        <InputNumber @bind-Value="vac.BatchNo"></InputNumber>
    </div>
    <br />
    <div>
        <label>Distributed area</label>
        <br />
        <InputText @bind-Value="vac.Area"></InputText>

    </div>
    <br />
    <div>
        <label>Number of Doses</label>
        <br />
        <InputNumber @bind-Value="vac.NoofDoses"></InputNumber>

    </div>
    <br />
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {

    protected override async Task OnInitializedAsync()
    {
        await VaccineService.GetVaccine();
        VaccineService.OnChange += StateHasChanged;
    }
    public VaccineInfo vac { get; set; } = new VaccineInfo();

    async void HandleSubmit()
    {
        await VaccineService.Createvac(vac);
    }

    public void Dispose()
    {
        VaccineService.OnChange -= StateHasChanged;
    }
}
